/*
 * Copyright Â© 2025 CUI-OpenSource-Software (info@cuioss.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuioss.tools.security.http.tests;

import de.cuioss.test.generator.Generators;
import de.cuioss.test.generator.junit.EnableGeneratorController;
import de.cuioss.test.generator.junit.parameterized.TypeGeneratorSource;
import de.cuioss.tools.security.http.config.SecurityConfiguration;
import de.cuioss.tools.security.http.core.UrlSecurityFailureType;
import de.cuioss.tools.security.http.exceptions.UrlSecurityException;
import de.cuioss.tools.security.http.generators.injection.IISCVEAttackGenerator;
import de.cuioss.tools.security.http.monitoring.SecurityEventCounter;
import de.cuioss.tools.security.http.pipeline.URLPathValidationPipeline;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;

import static org.junit.jupiter.api.Assertions.*;

/**
 * T26: Test IIS/Windows specific CVEs
 * 
 * <p>
 * This test class implements Task T26 from the HTTP security validation plan,
 * focusing on testing known IIS/Windows CVE attack patterns that exploit path traversal,
 * directory traversal, and other Windows/IIS-specific vulnerabilities documented in
 * security advisories and CVE databases.
 * </p>
 * 
 * <h3>Test Coverage</h3>
 * <ul>
 *   <li>CVE-2017-7269: IIS 6.0 WebDAV ScStoragePathFromUrl buffer overflow</li>
 *   <li>CVE-2015-1635: IIS HTTP.sys remote code execution</li>
 *   <li>CVE-2010-2730: IIS ASP.NET request validation bypass</li>
 *   <li>CVE-2009-1535: IIS WebDAV authentication bypass</li>
 *   <li>CVE-2008-0075: IIS FTP service path traversal</li>
 *   <li>CVE-2006-0026: IIS ASP path disclosure vulnerability</li>
 *   <li>CVE-2005-4360: IIS WebDAV privilege escalation</li>
 *   <li>CVE-2003-0226: IIS directory traversal via Unicode</li>
 * </ul>
 * 
 * <h3>Validation Expectations</h3>
 * <ul>
 *   <li>All IIS/Windows CVE patterns should be <strong>REJECTED</strong></li>
 *   <li>Security events should be properly recorded</li>
 *   <li>Appropriate failure types should be identified</li>
 *   <li>Original inputs should be preserved in exceptions</li>
 * </ul>
 * 
 * <h3>Security Standards</h3>
 * <ul>
 *   <li>Microsoft Security Advisories</li>
 *   <li>NIST CVE Database</li>
 *   <li>OWASP Top 10 - Path Traversal</li>
 *   <li>CWE-22: Path Traversal</li>
 * </ul>
 * 
 * Implements: Task T26 from HTTP verification specification
 * 
 * @author Claude Code Generator
 * @since 2.5
 */
@EnableGeneratorController
@DisplayName("T26: IIS/Windows CVE Attack Tests")
class IISCVEAttackTest {

    private URLPathValidationPipeline pipeline;
    private SecurityEventCounter eventCounter;
    private SecurityConfiguration config;

    @BeforeEach
    void setUp() {
        config = SecurityConfiguration.defaults();
        eventCounter = new SecurityEventCounter();
        pipeline = new URLPathValidationPipeline(config, eventCounter);
    }

    /**
     * Test all IIS/Windows CVE attack patterns generated by IISCVEAttackGenerator.
     * 
     * <p>
     * Tests various IIS/Windows CVE attack patterns including path traversal,
     * encoding bypasses, and Windows-specific vulnerabilities.
     * </p>
     * 
     * @param iisCVEPattern A malicious IIS/Windows CVE pattern
     */
    @ParameterizedTest
    @TypeGeneratorSource(value = IISCVEAttackGenerator.class, count = 64)
    @DisplayName("All IIS/Windows CVE attack patterns should be rejected")
    void shouldRejectAllIISCVEAttackPatterns(String iisCVEPattern) {
        // Given: An IIS/Windows CVE attack pattern from the generator
        long initialEventCount = eventCounter.getTotalCount();

        // When: Attempting to validate the malicious IIS/Windows CVE pattern
        var exception = assertThrows(UrlSecurityException.class,
                () -> pipeline.validate(iisCVEPattern),
                "IIS/Windows CVE attack pattern should be rejected: " + iisCVEPattern);

        // Then: The validation should fail with appropriate security event
        assertNotNull(exception, "Exception should be thrown for IIS/Windows CVE attack");
        assertTrue(isIISCVERelatedFailure(exception.getFailureType()),
                "Failure type should be IIS/Windows CVE related: " + exception.getFailureType());

        // And: Original malicious input should be preserved
        assertEquals(iisCVEPattern, exception.getOriginalInput(),
                "Original input should be preserved in exception");

        // And: Security event should be recorded
        assertTrue(eventCounter.getTotalCount() > initialEventCount,
                "Security event should be recorded");
    }

    /**
     * Test CVE-2017-7269: IIS 6.0 WebDAV buffer overflow patterns.
     * 
     * <p>
     * This test ensures that the buffer overflow patterns from
     * CVE-2017-7269 are properly detected and blocked.
     * </p>
     */
    @Test
    @DisplayName("CVE-2017-7269 WebDAV buffer overflow patterns should be blocked")
    void shouldBlockCVE20177269Patterns() {
        String[] cve20177269Patterns = {
                // WebDAV buffer overflow patterns
                // QI-17: Replace 40KB patterns with realistic path overflow boundaries
                "/webdav/" + Generators.letterStrings(5000, 8000).next() + "/../../../windows/win.ini",
                "/dav/" + Generators.letterStrings(5000, 8000).next() + "/../../../windows/system32/config/sam",
                "/webdav/test.txt" + Generators.letterStrings(5000, 8000).next() + "/../../../boot.ini"
        };

        for (String pattern : cve20177269Patterns) {
            long initialEventCount = eventCounter.getTotalCount();

            var exception = assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2017-7269 pattern should be blocked: " + pattern);

            assertNotNull(exception.getFailureType(),
                    "Failure type should be specified for CVE-2017-7269 pattern: " + pattern);

            assertTrue(eventCounter.getTotalCount() > initialEventCount,
                    "Security event should be recorded for CVE-2017-7269 pattern: " + pattern);
        }
    }

    /**
     * Test CVE-2015-1635: IIS HTTP.sys remote code execution patterns.
     * 
     * <p>
     * Validates that HTTP.sys Range header attacks are properly detected.
     * </p>
     */
    @Test
    @DisplayName("CVE-2015-1635 HTTP.sys RCE patterns should be blocked")
    void shouldBlockCVE20151635Patterns() {
        String[] cve20151635Patterns = {
                // HTTP.sys Range header attacks (note: simplified for path validation)
                "/default.aspx/../../../windows/win.ini",
                "/index.html/../../../windows/system32/drivers/etc/hosts",
                "/app/../../../windows/system32/config/system"
        };

        for (String pattern : cve20151635Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2015-1635 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test CVE-2010-2730: IIS ASP.NET request validation bypass.
     * 
     * <p>
     * Ensures that ASP.NET validation bypass patterns are detected.
     * </p>
     */
    @Test
    @DisplayName("CVE-2010-2730 ASP.NET validation bypass patterns should be blocked")
    void shouldBlockCVE20102730Patterns() {
        String[] cve20102730Patterns = {
                // ASP.NET request validation bypass patterns
                "/default.aspx?input=<script>alert(1)</script>/../../../windows/win.ini",
                "/login.aspx?user=%3Cscript%3Ealert(1)%3C%2Fscript%3E/../../../boot.ini",
                "/search.aspx?q=javascript:alert(1)/../../../windows/system32/config/sam",
                "/page.aspx?data=%u003Cscript%u003Ealert(1)%u003C/script%u003E/../../../windows/temp"
        };

        for (String pattern : cve20102730Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2010-2730 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test CVE-2009-1535: IIS WebDAV authentication bypass.
     * 
     * <p>
     * Validates that WebDAV authentication bypass patterns using
     * translate:f header are properly detected.
     * </p>
     */
    @Test
    @DisplayName("CVE-2009-1535 WebDAV authentication bypass patterns should be blocked")
    void shouldBlockCVE20091535Patterns() {
        String[] cve20091535Patterns = {
                // WebDAV authentication bypass patterns
                "/default.asp\\..\\..\\..\\windows\\win.ini",
                "/index.asp\\..\\..\\..\\windows\\system32\\config\\sam",
                "/admin.asp\\..\\..\\..\\boot.ini",
                "/login.asp\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
        };

        for (String pattern : cve20091535Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2009-1535 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test CVE-2003-0226: IIS Unicode directory traversal.
     * 
     * <p>
     * Ensures that Unicode-based directory traversal patterns
     * are properly detected and blocked.
     * </p>
     */
    @Test
    @DisplayName("CVE-2003-0226 Unicode traversal patterns should be blocked")
    void shouldBlockCVE20030226Patterns() {
        String[] cve20030226Patterns = {
                // Unicode directory traversal patterns (Nimda-style)
                "/scripts/..%c0%af..%c0%af..%c0%afwinnt%c0%afsystem32%c0%afcmd.exe?/c+dir+c:\\",
                "/msadc/..%c0%af..%c0%af..%c0%afwinnt%c0%afwin.ini",
                "/iisadmin/..%c0%af..%c0%af..%c0%afboot.ini",
                "/scripts/..%c1%9c..%c1%9c..%c1%9cwinnt%c1%9csystem32%c1%9ccmd.exe"
        };

        for (String pattern : cve20030226Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2003-0226 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test Windows-specific directory traversal patterns.
     * 
     * <p>
     * Validates Windows-specific path traversal using backslashes
     * and Windows path conventions.
     * </p>
     */
    @Test
    @DisplayName("Windows backslash traversal patterns should be blocked")
    void shouldBlockWindowsBackslashTraversalPatterns() {
        String[] windowsTraversalPatterns = {
                // Windows backslash traversal
                "/default.asp/..\\..\\..\\windows\\win.ini",
                "/index.aspx/..\\..\\..\\windows\\system32\\config\\sam",
                "/login.asp/..\\..\\..\\boot.ini",
                "/admin.aspx/..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
        };

        for (String pattern : windowsTraversalPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Windows backslash traversal should be blocked: " + pattern);
        }
    }

    /**
     * Test IIS short filename (8.3) attack patterns.
     * 
     * <p>
     * Ensures that 8.3 filename attacks are properly detected.
     * </p>
     */
    @Test
    @DisplayName("IIS short filename (8.3) attack patterns should be blocked")
    void shouldBlockIISShortFilenameAttackPatterns() {
        String[] shortFilenamePatterns = {
                // 8.3 filename attacks
                "/PROGRA~1/../../../windows/win.ini",
                "/DOCUME~1/../../../windows/system32/config/sam",
                "/WINDOW~1/../../../boot.ini",
                "/SYSTEM~1/../../../windows/system32/drivers/etc/hosts"
        };

        for (String pattern : shortFilenamePatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "IIS short filename attack should be blocked: " + pattern);
        }
    }

    /**
     * Test IIS alternate data stream attack patterns.
     * 
     * <p>
     * Validates that alternate data stream (ADS) attacks are detected.
     * </p>
     */
    @Test
    @DisplayName("IIS alternate data stream attack patterns should be blocked")
    void shouldBlockIISAlternateDataStreamAttackPatterns() {
        String[] adsPatterns = {
                // Alternate data stream attacks
                "/default.asp:$DATA/../../../windows/win.ini",
                "/index.html:$INDEX_ALLOCATION/../../../windows/system32/config/system",
                "/login.asp::$DATA/../../../boot.ini",
                "/admin.aspx:ads/../../../windows/system32/drivers/etc/hosts"
        };

        for (String pattern : adsPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "IIS ADS attack should be blocked: " + pattern);
        }
    }

    /**
     * Test Windows UNC path attack patterns.
     * 
     * <p>
     * Ensures that UNC path attacks targeting network shares are blocked.
     * </p>
     */
    @Test
    @DisplayName("Windows UNC path attack patterns should be blocked")
    void shouldBlockWindowsUNCPathAttackPatterns() {
        String[] uncPatterns = {
                // UNC path attacks
                "/default.asp/../../../\\\\server\\share\\windows\\win.ini",
                "/index.html/../../../\\\\localhost\\c$\\windows\\system32\\config\\sam",
                "/login.asp/../../../\\\\127.0.0.1\\c$\\boot.ini"
        };

        for (String pattern : uncPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Windows UNC path attack should be blocked: " + pattern);
        }
    }

    /**
     * Test IIS double decoding attack patterns.
     * 
     * <p>
     * Validates that double URL decoding attacks are properly detected.
     * </p>
     */
    @Test
    @DisplayName("IIS double decoding attack patterns should be blocked")
    void shouldBlockIISDoubleDecodingAttackPatterns() {
        String[] doubleDecodingPatterns = {
                // Double decoding attacks
                "/scripts/..%252f..%252f..%252fwindows%252fwin.ini",
                "/msadc/..%252f..%252f..%252fwindows%252fsystem32%252fconfig%252fsam",
                "/iisadmin/..%252f..%252f..%252fboot.ini"
        };

        for (String pattern : doubleDecodingPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "IIS double decoding attack should be blocked: " + pattern);
        }
    }

    /**
     * Test Windows registry access attempts.
     * 
     * <p>
     * Ensures that attempts to access Windows registry files are blocked.
     * </p>
     */
    @Test
    @DisplayName("Windows registry access attempts should be blocked")
    void shouldBlockWindowsRegistryAccessAttempts() {
        String[] registryPatterns = {
                // Registry access attempts
                "/default.asp/../../../windows/system32/config/SOFTWARE",
                "/index.html/../../../windows/system32/config/SECURITY",
                "/login.asp/../../../windows/system32/config/SYSTEM",
                "/admin.aspx/../../../windows/system32/config/DEFAULT"
        };

        for (String pattern : registryPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Windows registry access should be blocked: " + pattern);
        }
    }

    /**
     * Test complex Windows encoding combinations.
     * 
     * <p>
     * Validates that complex encoding combinations targeting Windows
     * paths are properly detected.
     * </p>
     */
    @Test
    @DisplayName("Complex Windows encoding combinations should be blocked")
    void shouldBlockComplexWindowsEncodingCombinations() {
        String[] complexEncodingPatterns = {
                // Complex encoding combinations
                "/scripts/..%5c..%5c..%5cwindows%5cwin.ini",
                "/msadc/..%2f..%5c..%2fwindows%5csystem32%2fconfig%5csam",
                "/iisadmin/..%5c..%2f..%5cboot.ini"
        };

        for (String pattern : complexEncodingPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Complex Windows encoding should be blocked: " + pattern);
        }
    }

    /**
     * Test IIS metabase attack patterns.
     * 
     * <p>
     * Ensures that attempts to access IIS metabase files are blocked.
     * </p>
     */
    @Test
    @DisplayName("IIS metabase access attempts should be blocked")
    void shouldBlockIISMetabaseAccessAttempts() {
        String[] metabasePatterns = {
                // Metabase access attempts
                "/iisadmin/default.asp/../../../windows/system32/inetsrv/MetaBase.xml",
                "/scripts/default.asp/../../../windows/system32/inetsrv/MBSchema.xml",
                "/msadc/default.asp/../../../windows/system32/LogFiles/W3SVC1/"
        };

        for (String pattern : metabasePatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "IIS metabase access should be blocked: " + pattern);
        }
    }

    /**
     * Test that security events are properly categorized for different IIS/Windows CVE types.
     */
    @Test
    @DisplayName("Different IIS/Windows CVE types should generate appropriate security events")
    void shouldCategorizeIISCVESecurityEventsCorrectly() {
        // Test CVE-2017-7269
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/webdav/" + "A".repeat(100) + "/../../../windows/win.ini"));

        // Test CVE-2009-1535
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/default.asp\\..\\..\\..\\windows\\system32\\config\\sam"));

        // Test CVE-2003-0226
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/scripts/..%c0%af..%c0%af..%c0%afwinnt%c0%afwin.ini"));

        // At least one security event should be recorded
        assertTrue(eventCounter.getTotalCount() > 0,
                "At least one security event should be recorded for IIS/Windows CVE attacks");
    }

    /**
     * Test performance impact of IIS/Windows CVE validation.
     * 
     * <p>
     * Ensures that validation performance remains acceptable even
     * when processing complex IIS/Windows CVE attack patterns.
     * </p>
     */
    @Test
    @DisplayName("IIS/Windows CVE validation should maintain performance")
    void shouldMaintainPerformanceWithIISCVEAttacks() {
        String complexIISCVEPattern = "/webdav/" + "A".repeat(512) + "/../../../../../../../../../windows/win.ini";

        // Warm up
        for (int i = 0; i < 10; i++) {
            try {
                pipeline.validate(complexIISCVEPattern);
            } catch (UrlSecurityException ignored) {
                // Expected for malicious pattern
            }
        }

        // Measure performance
        long startTime = System.nanoTime();
        for (int i = 0; i < 100; i++) {
            try {
                pipeline.validate(complexIISCVEPattern);
            } catch (UrlSecurityException ignored) {
                // Expected for malicious pattern
            }
        }
        long endTime = System.nanoTime();

        long averageNanos = (endTime - startTime) / 100;
        long averageMillis = averageNanos / 1_000_000;

        // Should complete within reasonable time (< 5ms per validation)
        assertTrue(averageMillis < 5,
                "IIS/Windows CVE validation should complete within 5ms, actual: " + averageMillis + "ms");
    }

    /**
     * Helper method to determine if a failure type is related to IIS/Windows CVE attacks.
     * 
     * @param failureType The failure type to check
     * @return true if the failure type is IIS/Windows CVE related
     */
    private boolean isIISCVERelatedFailure(UrlSecurityFailureType failureType) {
        return failureType.isPathTraversalAttack() ||
                failureType.isEncodingIssue() ||
                failureType.isCharacterAttack() ||
                failureType.isSizeViolation() ||
                failureType == UrlSecurityFailureType.SUSPICIOUS_PATTERN_DETECTED ||
                failureType == UrlSecurityFailureType.INVALID_CHARACTER ||
                failureType == UrlSecurityFailureType.KNOWN_ATTACK_SIGNATURE ||
                failureType == UrlSecurityFailureType.MALFORMED_INPUT ||
                failureType == UrlSecurityFailureType.EXCESSIVE_NESTING ||
                failureType == UrlSecurityFailureType.INPUT_TOO_LONG ||
                failureType == UrlSecurityFailureType.PATH_TOO_LONG ||
                failureType == UrlSecurityFailureType.XSS_DETECTED ||
                failureType == UrlSecurityFailureType.SQL_INJECTION_DETECTED ||
                failureType == UrlSecurityFailureType.CONTROL_CHARACTERS;
    }
}