/*
 * Copyright Â© 2025 CUI-OpenSource-Software (info@cuioss.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuioss.tools.security.http.tests;

import de.cuioss.test.generator.Generators;
import de.cuioss.test.generator.junit.EnableGeneratorController;
import de.cuioss.test.generator.junit.parameterized.TypeGeneratorSource;
import de.cuioss.tools.security.http.config.SecurityConfiguration;
import de.cuioss.tools.security.http.core.UrlSecurityFailureType;
import de.cuioss.tools.security.http.exceptions.UrlSecurityException;
import de.cuioss.tools.security.http.generators.injection.ApacheCVEAttackGenerator;
import de.cuioss.tools.security.http.monitoring.SecurityEventCounter;
import de.cuioss.tools.security.http.pipeline.URLPathValidationPipeline;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;

import static org.junit.jupiter.api.Assertions.*;

/**
 * T25: Test Apache path traversal CVEs
 * 
 * <p>
 * This test class implements Task T25 from the HTTP security validation plan,
 * focusing on testing known Apache CVE attack patterns that exploit path traversal,
 * directory traversal, and other Apache-specific vulnerabilities documented in
 * security advisories and CVE databases.
 * </p>
 * 
 * <h3>Test Coverage</h3>
 * <ul>
 *   <li>CVE-2021-41773: Apache HTTP Server path traversal</li>
 *   <li>CVE-2021-42013: Apache HTTP Server path traversal bypass</li>
 *   <li>CVE-2019-0230: Apache Struts path traversal</li>
 *   <li>CVE-2020-1927: Apache HTTP Server mod_rewrite vulnerability</li>
 *   <li>CVE-2019-0211: Apache HTTP Server privilege escalation</li>
 *   <li>CVE-2018-1333: Apache HTTP Server DoS via crafted request</li>
 *   <li>CVE-2017-15710: Apache HTTP Server mod_authnz_ldap vulnerability</li>
 *   <li>CVE-2016-8743: Apache HTTP Server chunked transfer encoding</li>
 * </ul>
 * 
 * <h3>Validation Expectations</h3>
 * <ul>
 *   <li>All Apache CVE patterns should be <strong>REJECTED</strong></li>
 *   <li>Security events should be properly recorded</li>
 *   <li>Appropriate failure types should be identified</li>
 *   <li>Original inputs should be preserved in exceptions</li>
 * </ul>
 * 
 * <h3>Security Standards</h3>
 * <ul>
 *   <li>Apache Security Advisories</li>
 *   <li>NIST CVE Database</li>
 *   <li>OWASP Top 10 - Path Traversal</li>
 *   <li>CWE-22: Path Traversal</li>
 * </ul>
 * 
 * Implements: Task T25 from HTTP verification specification
 * 
 * @author Claude Code Generator
 * @since 2.5
 */
@EnableGeneratorController
@DisplayName("T25: Apache CVE Attack Tests")
class ApacheCVEAttackTest {

    private URLPathValidationPipeline pipeline;
    private SecurityEventCounter eventCounter;
    private SecurityConfiguration config;

    @BeforeEach
    void setUp() {
        config = SecurityConfiguration.defaults();
        eventCounter = new SecurityEventCounter();
        pipeline = new URLPathValidationPipeline(config, eventCounter);
    }

    /**
     * Test all Apache CVE attack patterns generated by ApacheCVEAttackGenerator.
     * 
     * <p>
     * Tests various Apache CVE attack patterns including path traversal,
     * encoding bypasses, and Apache-specific vulnerabilities.
     * </p>
     * 
     * @param apacheCVEPattern A malicious Apache CVE pattern
     */
    @ParameterizedTest
    @TypeGeneratorSource(value = ApacheCVEAttackGenerator.class, count = 64)
    @DisplayName("All Apache CVE attack patterns should be rejected")
    void shouldRejectAllApacheCVEAttackPatterns(String apacheCVEPattern) {
        // Given: An Apache CVE attack pattern from the generator
        long initialEventCount = eventCounter.getTotalCount();

        // When: Attempting to validate the malicious Apache CVE pattern
        var exception = assertThrows(UrlSecurityException.class,
                () -> pipeline.validate(apacheCVEPattern),
                "Apache CVE attack pattern should be rejected: " + apacheCVEPattern);

        // Then: The validation should fail with appropriate security event
        assertNotNull(exception, "Exception should be thrown for Apache CVE attack");
        assertTrue(isApacheCVERelatedFailure(exception.getFailureType()),
                "Failure type should be Apache CVE related: " + exception.getFailureType());

        // And: Original malicious input should be preserved
        assertEquals(apacheCVEPattern, exception.getOriginalInput(),
                "Original input should be preserved in exception");

        // And: Security event should be recorded
        assertTrue(eventCounter.getTotalCount() > initialEventCount,
                "Security event should be recorded");
    }

    /**
     * Test CVE-2021-41773: Apache HTTP Server path traversal.
     * 
     * <p>
     * This test ensures that the specific path traversal patterns from
     * CVE-2021-41773 are properly detected and blocked.
     * </p>
     */
    @Test
    @DisplayName("CVE-2021-41773 path traversal patterns should be blocked")
    void shouldBlockCVE202141773Patterns() {
        String[] cve202141773Patterns = {
                // Original CVE-2021-41773 patterns
                "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd",
                "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/shadow",
                "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/hosts",
                "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/windows/win.ini",
                "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/windows/system32/drivers/etc/hosts"
        };

        for (String pattern : cve202141773Patterns) {
            long initialEventCount = eventCounter.getTotalCount();

            var exception = assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2021-41773 pattern should be blocked: " + pattern);

            assertNotNull(exception.getFailureType(),
                    "Failure type should be specified for CVE-2021-41773 pattern: " + pattern);

            assertTrue(eventCounter.getTotalCount() > initialEventCount,
                    "Security event should be recorded for CVE-2021-41773 pattern: " + pattern);
        }
    }

    /**
     * Test CVE-2021-42013: Apache HTTP Server path traversal bypass.
     * 
     * <p>
     * Validates that the bypass techniques for CVE-2021-41773 using
     * double URL encoding are properly detected.
     * </p>
     */
    @Test
    @DisplayName("CVE-2021-42013 path traversal bypass patterns should be blocked")
    void shouldBlockCVE202142013Patterns() {
        String[] cve202142013Patterns = {
                // CVE-2021-42013 double encoding bypass patterns
                "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd",
                "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/shadow",
                "/icons/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd",
                "/manual/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/hosts"
        };

        for (String pattern : cve202142013Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2021-42013 bypass pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test CVE-2019-0230: Apache Struts path traversal.
     * 
     * <p>
     * Ensures that Apache Struts specific path traversal patterns
     * are properly detected and blocked.
     * </p>
     */
    @Test
    @DisplayName("CVE-2019-0230 Apache Struts patterns should be blocked")
    void shouldBlockCVE20190230Patterns() {
        String[] cve20190230Patterns = {
                // Apache Struts path traversal patterns
                "/%2e%2e/%2e%2e/%2e%2e/etc/passwd",
                "/..%252f..%252f..%252f..%252fetc%252fpasswd",
                "/..%c0%af..%c0%af..%c0%af..%c0%afetc%c0%afpasswd",
                "/..%ef%bc%8f..%ef%bc%8f..%ef%bc%8f..%ef%bc%8fetc%ef%bc%8fpasswd"
        };

        for (String pattern : cve20190230Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2019-0230 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test CVE-2020-1927: Apache HTTP Server mod_rewrite vulnerability.
     * 
     * <p>
     * Validates that mod_rewrite specific attack patterns are detected.
     * </p>
     */
    @Test
    @DisplayName("CVE-2020-1927 mod_rewrite patterns should be blocked")
    void shouldBlockCVE20201927Patterns() {
        String[] cve20201927Patterns = {
                // mod_rewrite vulnerability patterns
                "/index.php?page=..%2f..%2f..%2f..%2fetc%2fpasswd",
                "/admin.php?file=..%2f..%2f..%2f..%2fetc%2fshadow",
                "/search.php?include=..%2f..%2f..%2f..%2fetc%2fhosts"
        };

        for (String pattern : cve20201927Patterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "CVE-2020-1927 pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test Apache Tomcat specific CVE patterns.
     * 
     * <p>
     * Ensures that Apache Tomcat vulnerabilities like CVE-2020-1938
     * are properly detected and blocked.
     * </p>
     */
    @Test
    @DisplayName("Apache Tomcat CVE patterns should be blocked")
    void shouldBlockApacheTomcatCVEPatterns() {
        String[] tomcatCVEPatterns = {
                // CVE-2020-1938: Apache Tomcat AJP Request Injection
                "/WEB-INF/../../../etc/passwd",
                "/META-INF/../../../etc/shadow",
                "/classes/../../../etc/hosts",

                // CVE-2018-1336: Apache Tomcat UTF-8 decoder bug
                "/utf8%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd",
                "/unicode%e0%80%ae%e0%80%ae/etc/shadow"
        };

        for (String pattern : tomcatCVEPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Apache Tomcat CVE pattern should be blocked: " + pattern);
        }
    }

    /**
     * Test complex multi-vector Apache CVE combinations.
     * 
     * <p>
     * Validates that complex attacks combining multiple Apache CVE
     * techniques are properly detected.
     * </p>
     */
    @Test
    @DisplayName("Complex multi-vector Apache CVE combinations should be blocked")
    void shouldBlockComplexApacheCVECombinations() {
        String[] complexPatterns = {
                // Complex multi-vector Apache CVE combinations - QI-17: Fixed to test realistic boundaries
                "/cgi-bin/.%2e/%2e%2e/.%%32%65/.%%32%65/etc/passwd?q=" + generateBoundaryPadding(100),
                "/manual/.%2e/.%%32%65/" + generateBoundaryPadding(150) + "/../../../etc/shadow",

                // Apache variant with different encodings
                "/apache/.%2e%2e/.%2e%2e/.%2e%2e/etc/passwd",
                "/httpd/..%255c..%255c..%255c/etc/shadow",
                "/server/..%c1%1c..%c1%1c..%c1%1c/etc/hosts"
        };

        for (String pattern : complexPatterns) {
            assertThrows(UrlSecurityException.class,
                    () -> pipeline.validate(pattern),
                    "Complex Apache CVE combination should be blocked: " + pattern);
        }
    }

    /**
     * Test that security events are properly categorized for different Apache CVE types.
     */
    @Test
    @DisplayName("Different Apache CVE types should generate appropriate security events")
    void shouldCategorizeApacheCVESecurityEventsCorrectly() {
        // Test CVE-2021-41773
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"));

        // Test CVE-2021-42013
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/cgi-bin/.%%32%65/.%%32%65/etc/shadow"));

        // Test CVE-2019-0230
        assertThrows(UrlSecurityException.class,
                () -> pipeline.validate("/%2e%2e/%2e%2e/%2e%2e/etc/hosts"));

        // At least one security event should be recorded
        assertTrue(eventCounter.getTotalCount() > 0,
                "At least one security event should be recorded for Apache CVE attacks");
    }

    /**
     * Test performance impact of Apache CVE validation.
     * 
     * <p>
     * Ensures that validation performance remains acceptable even
     * when processing complex Apache CVE attack patterns.
     * </p>
     */
    @Test
    @DisplayName("Apache CVE validation should maintain performance")
    void shouldMaintainPerformanceWithApacheCVEAttacks() {
        String complexApacheCVEPattern = "/cgi-bin/.%2e/%2e%2e/.%%32%65/.%%32%65/../../../../../../../../../etc/passwd?query=" + generateBoundaryPadding(200); // QI-17: Fixed to test realistic boundaries

        // Warm up
        for (int i = 0; i < 10; i++) {
            try {
                pipeline.validate(complexApacheCVEPattern);
            } catch (UrlSecurityException ignored) {
                // Expected for malicious pattern
            }
        }

        // Measure performance
        long startTime = System.nanoTime();
        for (int i = 0; i < 100; i++) {
            try {
                pipeline.validate(complexApacheCVEPattern);
            } catch (UrlSecurityException ignored) {
                // Expected for malicious pattern
            }
        }
        long endTime = System.nanoTime();

        long averageNanos = (endTime - startTime) / 100;
        long averageMillis = averageNanos / 1_000_000;

        // Should complete within reasonable time (< 5ms per validation)
        assertTrue(averageMillis < 5,
                "Apache CVE validation should complete within 5ms, actual: " + averageMillis + "ms");
    }

    /**
     * Helper method to determine if a failure type is related to Apache CVE attacks.
     * 
     * @param failureType The failure type to check
     * @return true if the failure type is Apache CVE related
     */
    private boolean isApacheCVERelatedFailure(UrlSecurityFailureType failureType) {
        return failureType.isPathTraversalAttack() ||
                failureType.isEncodingIssue() ||
                failureType.isCharacterAttack() ||
                failureType.isSizeViolation() ||
                failureType == UrlSecurityFailureType.SUSPICIOUS_PATTERN_DETECTED ||
                failureType == UrlSecurityFailureType.INVALID_CHARACTER ||
                failureType == UrlSecurityFailureType.KNOWN_ATTACK_SIGNATURE ||
                failureType == UrlSecurityFailureType.MALFORMED_INPUT ||
                failureType == UrlSecurityFailureType.EXCESSIVE_NESTING ||
                failureType == UrlSecurityFailureType.INPUT_TOO_LONG ||
                failureType == UrlSecurityFailureType.PATH_TOO_LONG;
    }

    // QI-17: Helper method for realistic boundary testing instead of massive .repeat() patterns
    /**
     * Generates boundary padding that tests realistic security limits instead of massive inputs.
     * @param length target length for padding (kept reasonable for actual security testing)
     * @return padding string for boundary testing
     */
    private String generateBoundaryPadding(int length) {
        return Generators.letterStrings(length, length + 20).next();
    }
}