/*
 * Copyright © 2025 CUI-OpenSource-Software (info@cuioss.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuioss.tools.security.http.generators;

import de.cuioss.test.generator.TypedGenerator;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Base class for generator contract validation tests.
 * 
 * <p>QI-4: Defines standard contract validation for all security generators.</p>
 * 
 * <p>All generator test classes should extend this base class to ensure
 * consistent contract compliance validation across all generators. This
 * provides standardized testing of core generator requirements including
 * null safety, type consistency, performance, and output quality.</p>
 * 
 * <h3>Contract Requirements Validated</h3>
 * <ul>
 *   <li><strong>Null Safety:</strong> next() never returns null</li>
 *   <li><strong>Type Consistency:</strong> getType() matches actual output type</li>  
 *   <li><strong>Performance:</strong> Generation completes within time limits</li>
 *   <li><strong>Output Quality:</strong> Provides varied, non-trivial output</li>
 * </ul>
 * 
 * <h3>Usage Example</h3>
 * <pre>{@code
 * class MyGeneratorTest extends GeneratorContractTestBase<String> {
 *     @Override
 *     protected TypedGenerator<String> createGenerator() {
 *         return new MyGenerator();
 *     }
 *     
 *     @Override
 *     protected Class<String> getExpectedType() {
 *         return String.class;
 *     }
 * }
 * }</pre>
 * 
 * @param <T> The type generated by the generator under test
 * 
 * @author Claude Code Generator
 * @since 2.5
 */
public abstract class GeneratorContractTestBase<T> {

    /**
     * Number of generations to test for contract validation.
     */
    protected static final int CONTRACT_TEST_ITERATIONS = 1000;

    /**
     * Number of generations to test for performance validation.
     */
    protected static final int PERFORMANCE_TEST_ITERATIONS = 100;

    /**
     * Maximum allowed time for performance test (in nanoseconds).
     * 10ms for 100 generations = 100μs per generation average.
     */
    protected static final long MAX_PERFORMANCE_TIME_NS = 10_000_000L;

    /**
     * Minimum number of unique outputs expected for output quality test.
     */
    protected static final int MIN_UNIQUE_OUTPUTS = 2;

    /**
     * Create an instance of the generator under test.
     * 
     * @return A new generator instance for testing
     */
    protected abstract TypedGenerator<T> createGenerator();

    /**
     * Get the expected type that the generator should produce.
     * 
     * @return The expected output type class
     */
    protected abstract Class<T> getExpectedType();

    /**
     * QI-4 Contract Test: Generator must never return null.
     * 
     * <p>Tests the fundamental null safety requirement. Generators must
     * provide meaningful output for any seed value and never return null,
     * as this would break downstream processing and testing logic.</p>
     */
    @Test
    @DisplayName("Generator contract: must never return null")
    void shouldNeverReturnNull() {
        TypedGenerator<T> generator = createGenerator();

        for (int i = 0; i < CONTRACT_TEST_ITERATIONS; i++) {
            T result = generator.next();
            assertNotNull(result,
                    "Generator returned null on iteration " + i +
                            ". Generators must never return null values.");
        }
    }

    /**
     * QI-4 Contract Test: Generator must return correct type.
     * 
     * <p>Tests type consistency between getType() declaration and actual
     * output. This ensures that the generator contract accurately reflects
     * the type of objects it produces.</p>
     */
    @Test
    @DisplayName("Generator contract: must return declared type")
    void shouldReturnCorrectType() {
        TypedGenerator<T> generator = createGenerator();

        // Test getType() returns expected type
        assertEquals(getExpectedType(), generator.getType(),
                "getType() must return the expected type class");

        // Test actual generated values match declared type
        for (int i = 0; i < 10; i++) {
            T result = generator.next();
            assertTrue(getExpectedType().isInstance(result),
                    "Generated value must be instance of declared type. " +
                            "Expected: " + getExpectedType().getSimpleName() +
                            ", but was: " + result.getClass().getSimpleName());
        }
    }

    /**
     * QI-4 Contract Test: Generator must complete within time limits.
     * 
     * <p>Tests performance requirements to ensure generators don't have
     * unbounded loops, excessive computation, or other performance issues
     * that could impact test execution time.</p>
     */
    @Test
    @DisplayName("Generator contract: must complete within performance limits")
    void shouldCompleteWithinTimeLimit() {
        TypedGenerator<T> generator = createGenerator();

        long startTime = System.nanoTime();

        for (int i = 0; i < PERFORMANCE_TEST_ITERATIONS; i++) {
            generator.next();
        }

        long duration = System.nanoTime() - startTime;

        assertTrue(duration < MAX_PERFORMANCE_TIME_NS,
                """
                        Generator took too long: %d ns for %d generations \
                        (%.2f μs per generation). Should complete within %d ns total.""".formatted(
                        duration, PERFORMANCE_TEST_ITERATIONS,
                        (double) duration / PERFORMANCE_TEST_ITERATIONS / 1000,
                        MAX_PERFORMANCE_TIME_NS));
    }

    /**
     * QI-4 Contract Test: Generator should provide varied output.
     * 
     * <p>Tests output quality to ensure the generator produces varied,
     * non-trivial content. While not all generators need high diversity
     * (e.g., boolean generators), most should avoid producing identical
     * output repeatedly.</p>
     * 
     * <p>Note: This is a quality test, not a strict requirement. Some
     * generators with limited domains may legitimately have low diversity.</p>
     */
    @Test
    @DisplayName("Generator contract: should provide varied output")
    void shouldProvideVariedOutput() {
        TypedGenerator<T> generator = createGenerator();

        Set<T> uniqueOutputs = new HashSet<>();

        for (int i = 0; i < 100; i++) {
            T result = generator.next();
            uniqueOutputs.add(result);
        }

        assertTrue(uniqueOutputs.size() >= MIN_UNIQUE_OUTPUTS,
                "Generator should provide varied output. Generated " +
                        uniqueOutputs.size() + " unique values out of 100 generations. " +
                        "Expected at least " + MIN_UNIQUE_OUTPUTS + " unique values. " +
                        "Note: Some generators with limited domains may legitimately have low diversity.");
    }

    /**
     * QI-4 Contract Test: Generator should handle edge cases gracefully.
     * 
     * <p>Tests that the generator maintains consistent behavior under
     * stress conditions and doesn't fail unexpectedly during extended use.</p>
     */
    @Test
    @DisplayName("Generator contract: should handle extended use gracefully")
    void shouldHandleExtendedUseGracefully() {
        TypedGenerator<T> generator = createGenerator();

        // Test extended generation without failures
        for (int i = 0; i < CONTRACT_TEST_ITERATIONS; i++) {
            try {
                T result = generator.next();
                assertNotNull(result, "Generation failed on iteration " + i);
            } /*~~(Catch specific not Exception)~~>*//*~~(Catch specific not Exception)~~>*/catch (Exception e) {
                fail("Generator threw unexpected exception on iteration " + i + ": " +
                        e.getClass().getSimpleName() + " - " + e.getMessage());
            }
        }
    }

    /**
     * Helper method to get sample output for debugging.
     * 
     * @param count Number of sample outputs to generate
     * @return List of sample outputs for inspection
     */
    protected List<T> getSampleOutputs(int count) {
        TypedGenerator<T> generator = createGenerator();
        List<T> samples = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            samples.add(generator.next());
        }

        return samples;
    }
}